--
-- VHDL Architecture RISCV_lib.SD_Controller.struct
--
-- Created:
--          by - flxbrggr.meyer (pc084)
--          at - 16:17:02 07/14/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2020.2 Built on 12 Apr 2020 at 11:28:22
--
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;
USE IEEE.math_real.all;
LIBRARY RISCV_lib;
USE RISCV_lib.constants.all;
USE RISCV_lib.data_types.all;
USE RISCV_lib.isa.all;


ARCHITECTURE struct OF SD_Controller IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addr_i     : std_logic_vector(31 DOWNTO 0);
   SIGNAL busy_o     : std_logic;
   SIGNAL continue_i : std_logic;
   SIGNAL data_i     : std_logic_vector(7 DOWNTO 0);
   SIGNAL data_o     : std_logic_vector(7 DOWNTO 0);
   SIGNAL error_o    : std_logic_vector(15 DOWNTO 0);
   SIGNAL hndShk_i   : std_logic;
   SIGNAL hndShk_o   : std_logic;
   SIGNAL mosi_o     : std_logic;
   SIGNAL rd_i       : std_logic;
   SIGNAL reset_i    : std_logic;
   SIGNAL sclk_o     : std_logic;
   SIGNAL wr_i       : std_logic;


   -- Component Declarations
   COMPONENT SD_Fetch
   PORT (
      busy_o      : IN     std_logic ;
      clk         : IN     std_logic ;
      data_o      : IN     std_logic_vector (7 DOWNTO 0);
      error_o     : IN     std_logic_vector (15 DOWNTO 0);
      hndShk_o    : IN     std_logic ;
      load_op_mem : IN     std_logic ;
      res_n       : IN     std_logic ;
      addr_i      : OUT    std_logic_vector (31 DOWNTO 0);
      continue_i  : OUT    std_logic ;
      data_valid  : OUT    std_logic ;
      hndShk_i    : OUT    std_logic ;
      loading     : OUT    std_logic ;
      rd_i        : OUT    std_logic ;
      reset_i     : OUT    std_logic ;
      sp_op_code  : OUT    word 
   );
   END COMPONENT;
   COMPONENT SdCardCtrl
   GENERIC (
      FREQ_G          : real       := 50.0;            --Master clock frequency (MHz)
      INIT_SPI_FREQ_G : real       := 0.4;             --Slow SPI clock freq. during initialization (MHz)
      SPI_FREQ_G      : real       := 25.0;            --Operational SPI frequency to the SD Card (MHz)
      BLOCK_SIZE_G    : natural    := 512;             --Number of bytes in an  SD card block or sector (Maybe set to 4?)
      CARD_TYPE_G     : CARDType_t := SDHC_CARD_E      --Type of SD Card connected to controller
   );
   PORT (
      addr_i     : IN     std_logic_vector (31 DOWNTO 0);
      clk        : IN     std_logic ;
      continue_i : IN     std_logic ;
      data_i     : IN     std_logic_vector (7 DOWNTO 0);
      hndShk_i   : IN     std_logic ;
      miso_i     : IN     std_logic ;
      rd_i       : IN     std_logic ;
      reset_i    : IN     std_logic ;
      wr_i       : IN     std_logic ;
      busy_o     : OUT    std_logic ;
      cs_bo      : OUT    std_logic ;
      data_o     : OUT    std_logic_vector (7 DOWNTO 0);
      error_o    : OUT    std_logic_vector (15 DOWNTO 0);
      hndShk_o   : OUT    std_logic ;
      mosi_o     : OUT    std_logic ;
      sclk_o     : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : SD_Fetch USE ENTITY RISCV_lib.SD_Fetch;
   FOR ALL : SdCardCtrl USE ENTITY RISCV_lib.SdCardCtrl;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   wr_i <= '0';
   data_i <= (others => '0');
   
   
                                     


   -- Instance port mappings.
   U_1 : SD_Fetch
      PORT MAP (
         busy_o      => busy_o,
         clk         => clk,
         data_o      => data_o,
         error_o     => error_o,
         hndShk_o    => hndShk_o,
         load_op_mem => load_op_mem,
         res_n       => res_n,
         addr_i      => addr_i,
         continue_i  => continue_i,
         data_valid  => data_valid,
         hndShk_i    => hndShk_i,
         loading     => loading,
         rd_i        => rd_i,
         reset_i     => reset_i,
         sp_op_code  => sp_op_code
      );
   U_0 : SdCardCtrl
      PORT MAP (
         addr_i     => addr_i,
         clk        => clk,
         continue_i => continue_i,
         data_i     => data_i,
         hndShk_i   => hndShk_i,
         miso_i     => miso_i,
         rd_i       => rd_i,
         reset_i    => reset_i,
         wr_i       => wr_i,
         busy_o     => busy_o,
         cs_bo      => cs_bo,
         data_o     => data_o,
         error_o    => error_o,
         hndShk_o   => hndShk_o,
         mosi_o     => mosi_o,
         sclk_o     => sclk_o
      );

END struct;
